// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  googleId String?    @unique
  email     String     @unique
  password  String?
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  event     Event[]
  admin     Admin?
  attendee  Attendee?
  organizer Organizer?
  payment   Payment[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Attendee {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  gender        Gender?
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("attendees")
}

model Organizer {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  gender           Gender
  profilePhoto     String?
  contactNumber    String
  organizationName String
  websiteUrl       String?
  socialMediaUrl   String?
  address          String?
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("organizers")
}

model Event {
  id          String         @id @default(uuid())
  organizerId String
  name        String
  description String?
  dateTime    DateTime
  ticketPrice Int
  totalTicket Int
  ticketSold  Int            @default(0)
  status      EventStatus    @default(UPCOMING)
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  location    EventLocation?
  images      EventImage[]
  guest       Guest?
  payment     Payment[]
  categories EventCategory[]

  organizer     User            @relation(fields: [organizerId], references: [id])

  @@map("events")
}

model Guest {
  id        String   @id @default(uuid())
  eventId   String   @unique
  name      String
  bio       String?
  imageUrl  String?
  expertise String?     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])

  @@map("guests")
}

// model Speaker {
//   id        String   @id @default(uuid())
//   eventId   String   @unique
//   name      String
//   bio       String?
//   imageUrl  String?
//   expertise String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   event Event @relation(fields: [eventId], references: [id])

//   @@map("speakers")
// }

model EventLocation {
  id      String @id @default(uuid())
  eventId String @unique
  street  String
  city    String
  country String

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_location")
}

model EventImage {
  id        String   @id @default(uuid())
  eventId   String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])

  @@map("event_images")
}

model Payment {
  id                 String        @id @default(uuid())
  userId             String
  eventId            String
  transactionId      String        @unique
  amount             Int
  currency           String        @default("BDT")
  paymentStatus      String       @default("Pending")
  paymentMethod      String?
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("payments")
}

model Category {
  id            String          @id @default(uuid())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
 
  categories EventCategory[]

  @@map("categories")
}

model EventCategory {
  eventId    String
  categoryId String

  event    Event    @relation(fields: [eventId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([eventId, categoryId])
  @@map("event_categories")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ORGANIZER
  ATTENDEE
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum EventStatus {
  UPCOMING
  ONGOING
  ENDED
}



// enum PaymentStatus {
//   PENDING
//   COMPLETED
//   FAILED
//   CANCELLED
// }
